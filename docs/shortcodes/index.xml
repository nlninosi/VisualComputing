<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Presentación</title><link>https://nlninosi.github.io/showcase/docs/shortcodes/</link><description>Recent content on Presentación</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nlninosi.github.io/showcase/docs/shortcodes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://nlninosi.github.io/showcase/docs/shortcodes/3D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nlninosi.github.io/showcase/docs/shortcodes/3D/</guid><description> Flor en coordenadas polares #</description></item><item><title/><link>https://nlninosi.github.io/showcase/docs/shortcodes/Histogram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nlninosi.github.io/showcase/docs/shortcodes/Histogram/</guid><description>Histograma # Un histograma de imagen es un tipo de histograma que actúa como una representación gráfica de la distribución tonal en una imagen digital. Representa el número de píxeles de cada valor tonal. Al observar el histograma de una imagen concreta, el espectador podrá juzgar toda la distribución tonal de un vistazo.
Nuestra implementacion del histograma se hizo de la manera siguiente:
Expand ↕ var stateR; var stateG; var stateB; var red_arr = new Array(256); var green_arr = new Array(256); var blue_arr = new Array(256); var showFilter = false; const filter = [ [-2, -1, 0], [-1, 1, 1], [0, 1, 2], ]; const filter2 = [ [-1, 0, 1], [-1, 0, 1], [-1, 0, 1], ]; var colors = new Array(3); var leftM = 30; var upM = 15; function preload() { img = loadImage(&amp;#34;/showcase/assets/1.</description></item><item><title/><link>https://nlninosi.github.io/showcase/docs/shortcodes/illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nlninosi.github.io/showcase/docs/shortcodes/illusions/</guid><description>Illusions # Definición del problema # Estudiar, poner en práctica y discutir las posibles aplicaciones de algunos fenómenos visuales e ilusiones ópticas conocidos.
Sustento teórico # Una ilusión óptica es cualquier ilusión del sentido de la visión que nos lleva a percibir la realidad de varias formas. Puede ser de carácter fisiológico, asociada a los efectos de una estimulación anómala o excesiva en los ojos o el cerebro o de carácter cognitivo, en las que interviene nuestro conocimiento del mundo.</description></item><item><title/><link>https://nlninosi.github.io/showcase/docs/shortcodes/Masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nlninosi.github.io/showcase/docs/shortcodes/Masking/</guid><description>Masking # Definición del problema # Sustento teórico # Que es el Masking? # Uno de los procedimientos experimentales más destacados para manipular la conciencia es el enmascaramiento visual, en el que se disminuye la visibilidad de un estímulo objetivo presentándolo en estrecha proximidad espacial y temporal con una denominada &amp;ldquo;máscara&amp;rdquo;. Por ejemplo, si se presenta una imagen objetivo solamente durante períodos breves, normalmente se puede percibir sin esfuerzo. Sin embargo, si la imagen objetivo breve es seguida inmediatamente por una segunda imagen consistente en una disposición de líneas y patrones aleatorios, su visibilidad se reduce considerablemente.</description></item><item><title/><link>https://nlninosi.github.io/showcase/docs/shortcodes/Rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nlninosi.github.io/showcase/docs/shortcodes/Rasterization/</guid><description>z-depth # Definición del problema # Sustento teórico # Implementación # Expand ↕ let img, colorFG = &amp;#39;#111111&amp;#39;, colorBG = &amp;#39;#f1f1f1&amp;#39;; let pos = 25; function preload(){ img = loadImage(&amp;#39;https://images.unsplash.com/photo-1620122303020-87ec826cf70d?ixlib=rb-4.0.3&amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=687&amp;amp;q=80&amp;#39;); //add an image } function setup() { createCanvas(600, 600); background(colorBG); img.resize(600, 600); } function draw() { background(colorBG); fill(colorFG); noStroke(); const ratio = 600/600; let coefZ = (pos/width)*200; const tilesX = map(coefZ, 0, 600, 10, 100); const tilesY = ratio * tilesX; const tileSize = width / tilesX; for (let y = 0; y &amp;lt; img.</description></item></channel></rss>